@import "../../function";

// mixins for grid system
// ------------------------
@mixin make-row($gutter: $grid-gutter-width) {
  position: relative;
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
  height: auto;
  @include clearfix;
}
@mixin col1($index) {
  $item: ".#{$bl-prefix}-col-#{$index}, .#{$bl-prefix}-col-xs-#{$index}, .#{$bl-prefix}-col-sm-#{$index}, .#{$bl-prefix}-col-md-#{$index}, .#{$bl-prefix}-col-lg-#{$index}";
  @include coll1(($index + 1), $item);
}
@mixin coll1($index, $list)  {
  	@if $index <= $grid-columns {
      $item: ".#{$bl-prefix}-col-#{$index}, .#{$bl-prefix}-col-xs-#{$index}, .#{$bl-prefix}-col-sm-#{$index}, .#{$bl-prefix}-col-md-#{$index}, .#{$bl-prefix}-col-lg-#{$index}";
      @include coll1(($index + 1), "#{$list}, #{$item}");
    }@else if $index > $grid-columns  {
      #{$list} {
        position: relative;
        // Prevent columns from collapsing when empty
        min-height: 1px;
        padding-left: ($grid-gutter-width / 2);
        padding-right: ($grid-gutter-width / 2);
      }
    }
  }
@mixin make-grid-columns() {
  @include col1(1);
}
@mixin col2($class, $index) { // initial
  $item: ".#{$bl-prefix}-col#{$class}-#{$index}";
  @include coll2($class, ($index + 1), $item);
}
@mixin coll2($class, $index, $list)  {
  	@if($index <= $grid-columns){
      $item: ".#{$bl-prefix}-col#{$class}-#{$index}";
      @include coll2($class, ($index + 1), "#{$list}, #{$item}");
    }@else if($index > $grid-columns) {
      #{$list} {
        float: left;
        flex: 0 0 auto;
      }
    }
  }
@mixin float-grid-columns($class) { 
  
  @include col2($class, 1); // kickstart it
}

// lesshint false
@mixin loop-grid-columns($index, $class){	
	@if $index > 0 {
    .#{$bl-prefix}-col#{$class}-#{$index} {
      display: block;
      width: percentage(($index / $grid-columns));
    }
    .#{$bl-prefix}-col#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
    .#{$bl-prefix}-col#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
    .#{$bl-prefix}-col#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
    .#{$bl-prefix}-col#{$class}-order-#{$index} {
     order: $index;
    }
  
    @include loop-grid-columns(($index - 1), $class);
  } @else if $index == 0{
  	.#{$bl-prefix}-col#{$class}-#{$index} {
      display: none;
    }
    .#{$bl-prefix}-col-push-#{$index} {
      left: auto;
    }
    .#{$bl-prefix}-col-pull-#{$index} {
      right: auto;
    }
    .#{$bl-prefix}-col#{$class}-push-#{$index} {
      left: auto;
    }
    .#{$bl-prefix}-col#{$class}-pull-#{$index} {
      right: auto;
    }
    .#{$bl-prefix}-col#{$class}-offset-#{$index} {
      margin-left: 0;
    }
    .#{$bl-prefix}-col#{$class}-order-#{$index} {
      order: 0;
    }
  }
}



@mixin make-grid($class: '') {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class);
}

// Grid system
.#{$bl-prefix}-row {
  @include make-row();
  display: block;
}

.#{$bl-prefix}-row-flex {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;

  &:before,
  &:after {
    display: flex;
  }
}

// x轴原点
.#{$bl-prefix}-row-flex-start {
  justify-content: flex-start;
}

// x轴居中
.#{$bl-prefix}-row-flex-center {
  justify-content: center;
}

// x轴反方向
.#{$bl-prefix}-row-flex-end {
  justify-content: flex-end;
}

// x轴平分
.#{$bl-prefix}-row-flex-space-between {
  justify-content: space-between;
}

// x轴有间隔地平分
.#{$bl-prefix}-row-flex-space-around {
  justify-content: space-around;
}

// 顶部对齐
.#{$bl-prefix}-row-flex-top {
  align-items: flex-start;
}

// 居中对齐
.#{$bl-prefix}-row-flex-middle {
  align-items: center;
}

// 底部对齐
.#{$bl-prefix}-row-flex-bottom {
  align-items: flex-end;
}

.#{$bl-prefix}-col {
  position: relative;
  display: block;
}

@include make-grid-columns();
@include make-grid();

// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(-xs);

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
  @include make-grid(-sm);
}

// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
  @include make-grid(-md);
}

// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min) {
  @include make-grid(-lg);
}

// Extra Large grid
//
// Columns, offsets, pushes, and pulls for the full hd device range.

@media (min-width: $screen-xl-min) {
  @include make-grid(-xl);
}
